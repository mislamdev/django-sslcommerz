name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Quality Assurance Job
  quality-assurance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        django-version: ['3.2', '4.0', '4.1', '4.2']
        exclude:
          # Django 3.2 doesn't support Python 3.11
          - python-version: '3.11'
            django-version: '3.2'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: Code quality checks with flake8
      run: |
        flake8 sslcommerz --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 sslcommerz --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Code formatting with black
      run: |
        black --check --diff sslcommerz/

    - name: Import sorting with isort
      run: |
        isort --check-only --diff sslcommerz/

    - name: Type checking with mypy
      run: |
        pip install mypy django-stubs
        mypy sslcommerz/ --ignore-missing-imports

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r sslcommerz/ -f json

  # Testing Job
  test:
    runs-on: ubuntu-latest
    needs: quality-assurance
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        django-version: ['3.2', '4.0', '4.1', '4.2']
        exclude:
          - python-version: '3.11'
            django-version: '3.2'

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install -e .[dev]
        pip install psycopg2-binary

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: |
        coverage run -m pytest tests.py -v
        coverage xml
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test Django management command
      env:
        SSLCOMMERZ_STORE_ID: test_store
        SSLCOMMERZ_STORE_PASSWORD: test_password
        SSLCOMMERZ_IS_SANDBOX: true
      run: |
        cd test_project && python manage.py test_sslcommerz

  # Documentation Build Job
  docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r docs/requirements.txt

    - name: Build documentation
      run: |
        cd docs && sphinx-build -b html . _build/html

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Package Build Job
  build:
    runs-on: ubuntu-latest
    needs: [test, docs]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # PyPI Deployment Job
  deploy-pypi:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/project/django-sslcommerz/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Test PyPI Deployment Job (for testing)
  deploy-test-pypi:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/django-sslcommerz/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

  # Security Scanning Job
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-pypi, deploy-test-pypi]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-pypi.result == 'success' }}
      run: |
        echo "✅ Successfully deployed to PyPI!"

    - name: Notify on failure
      if: ${{ needs.deploy-pypi.result == 'failure' || needs.deploy-test-pypi.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
